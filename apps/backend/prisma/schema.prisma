// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User table - extends auth.users with additional data
model User {
  id        String   @id @db.Uuid // References auth.users.id
  email     String   @unique
  fullName  String?  @map("full_name")
  avatarUrl String?  @map("avatar_url")
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  sentMessages Message[]   @relation("SentMessages")
  chatRooms    ChatRoom[]

  @@map("users")
}

// Chat rooms for conversations
model ChatRoom {
  id           String   @id @default(uuid()) @db.Uuid
  name         String?
  isGroup      Boolean  @default(false) @map("is_group")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastActivity DateTime @default(now()) @map("last_activity")

  // Relations
  messages     Message[]
  participants User[]

  @@map("chat_rooms")
}

// Messages table with AI moderation
// Note: No receiverId field - recipients are determined by chatRoom.participants minus sender
// This design supports both 1-on-1 and group chats seamlessly
model Message {
  id        String    @id @default(uuid()) @db.Uuid
  text      String
  isValid   Boolean   @default(true) @map("is_valid")
  system    Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Foreign keys - UUIDs referencing auth.users.id
  senderId   String @db.Uuid @map("sender_id")
  chatRoomId String @db.Uuid @map("chat_room_id")

  // Relations
  sender   User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  // AI moderation data
  moderationResult ModerationResult?

  @@map("messages")
}

// AI moderation results
model ModerationResult {
  id           String   @id @default(uuid()) @db.Uuid
  messageId    String   @unique @db.Uuid @map("message_id")
  isValid      Boolean  @map("is_valid")
  reason       String?
  confidence   Float?
  flaggedWords String[] @map("flagged_words")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("moderation_results")
}

// Enum for user roles
enum UserRole {
  STUDENT
  TUTOR
  ADMIN
}
